Q- What is a constructor? Can we override a constructor?

A constructor in Java is a special method used to initialize objects.
It has the same name as the class and does not have a return type, not even void.
Key Features of a Constructor:
‚úÖ The constructor name must match the class name.
‚úÖ It does not have a return type (not even void).
‚úÖ It is automatically called when an object is created.
‚úÖ If no constructor is defined, Java provides a default constructor.

No we can't override constructor , override required inheritance but constructor can't be inherited ,
                               instead of overriding constructor we can use constrictor overloading.
Types of constructor
1. Default constructor - if there is no constructor java will create default constructor
2. Parameterized Constructor :allows object initialization with custom values
3. Copy Constructor :copies values from one object to another.


Q 2: How to achieve multiple abstraction in Java?

     1. Using multiple Interface:




     2. Using Abstract class and Interface


Q 3. What is the static keyword in Java?

    Static keyword is used to define class-level member(variable ,method ,blocks and nested class )
    that belong to class itself rather than individual instance if the class .
    This Means static member can be used without creating object.


   Static Variable - Shared across all instance of the class.

       class counter {
                static count =0;

                counter (){
                     count++;
                     }
        }

       class main {
            Counter c1 = new Counter();
            Counter c2 = new Counter();
            System.out.println(Counter.count);

  }

   Static Method : belongs to the class
    A static method belongs to the class itself, not to any object of the class.
    It can be called without creating an object.
    It can access only static variables or other static methods directly.

 class counter {

    public static mycounter(){
    System.out.println("My CLass");
    }
}
 class main {

    System.out.println(Counter.mycounter()); -o/p Myclass  //(no object needed)
 }

 Static Block - Executed once when class is loaded into memory.

      class Database {
      static String driver;

        static {
        driver ="com.mysql.jdbc.driver";
        System.out.println("Database driver loaded: " + driver);
        }
      }
      public class Main {
          public static void main(String[] args) {
              // Output when class is first referenced:
              // "Database driver loaded: com.mysql.jdbc.Driver"
          }
      }

 Nested Class : Doesn't require any instance of outer class
        Class obj1 {
             static String name = "MIT"; // Static variable

             static class obj2 {
                  void display() {
                   System.out.println("University: " + name); // Access static variable
                     }

             }
        }
        public class main (){
            psvm (String[] args){
            obj1.obj2 ob = new obj1.obj2();
            ob.display(); //University: " MIT
             }
        }

 4. Explain JVM & GC :
      https://www.youtube.com/watch?v=vz6vSZRuS2M

 5. Difference between constructor overloading and method overloading?
        Constructor Overloading is used when you need different ways to initialize objects. For example,
        creating an object with default values or values passed from the constructor.

        Method Overloading is used when you want to perform the same action (like addition, multiplication) on different types or numbers of inputs. It improves the flexibility of your code.

 6. What is exception?
    Exception is an event that disturpts the execution flow of the programs.

    3 types of Exception:
        a. Checked Exception - This occurs during compile time which can be handle through try catch and finally.
            list of checked Exception :
               IOException
               filenotFoundException
               SQLException
               ClassNotFoundException
               NoSuchMethodException
               malFormedUrlException
        b) Unchecked Exception- its a runtime exception due to program bug/issue.
              ArrayoutofBoundException.
              NullPointerException
              AirthmeticException
              IndexOutofboundException
              IllegealArgumnetException

        3. Error - This occurs due to memory or some other issue whihc is unrelated to programs.
                outofMemoryErro
                StackoverFlowError

         Hierarchy of Exceptions:
         1. Java.lang.object
                      Throwable Class
                              Exception
                              Error
    Cretae Custom Exception:
      public class noSuchElementFound extends RuntimeException {
                          public noSuchElementFound(String Message){
                           super(message);
                           }
                           }
        psvm(){
        try{
          webelement submit =driver.findByELement(By.id("login"))
          submit.click();
        }
        catch(noSuchElement Exception e){
          throw new noSuchElementFound("No Such ELement found");
         }
        }
 7. serilization vs deseriilzation in java?
        Serialization is the process of converting a Java object into a byte stream so that it can be:

                Saved to a file

                Sent over a network

                Stored in a database

            üî∏ This byte stream can later be deserialized to recreate the original object.

              ‚ûï Use Cases:
                   Saving the state of an object (persistence)

                    Sending objects over a network (e.g., in RMI, socket programming)

                    Caching and deep cloning

             üõ†Ô∏è Syntax:
                To serialize an object:

                 The class must implement the Serializable interface.

                 Use ObjectOutputStream.
      Deserialization is the process of reconstructing a Java object from a byte stream.



8. Difference between String and StringBuffer.
    Feature | String | StringBuffer
    Mutability | Immutable | Mutable
    Meaning | Once created, it cannot be changed | You can modify the content directly
    Example | str.concat("Java") returns a new object | sb.append("Java") modifies the same object

9. Why String is imutable?
             A class is immutable if once an object is created, its state (data) cannot be changed.

             In Java:

             java
             Copy
             Edit
             String str = "Hello";
             str.concat(" World");
             System.out.println(str); // Output: Hello ‚Äî original object is unchanged
             The concat() method creates a new String object, leaving str unchanged.

             ‚úÖ Why Is String Immutable in Java? (In-Depth)
             Here are key reasons:

             1. Security
             Strings are widely used in:

             File paths

             Network connections (URLs)

             Class loading (Class.forName("com.xyz.Driver"))

             Credentials (username/password)

             If String were mutable:
             String url = "jdbc:mysql://localhost";
             connect(url);
             // imagine another thread changed url to "malicious://"
             ‚Üí That could compromise security.

             2. Caching & String Pool (Memory Optimization)
             Java uses a String pool to save memory.
             String a = "Test";
             String b = "Test";
             System.out.println(a == b); // true (same object)
             If String were mutable:

             a.append("Hack"); // if allowed, it would corrupt `b` too
             So immutability ensures that strings in the pool stay constant and safe to reuse.

             3. Thread Safety
             Since String is immutable, it's inherently thread-safe.

             No synchronization is required for reading or sharing strings between threads.

             String shared = "data"; // safe to use across threads
             This eliminates bugs due to concurrent modification.

             4. HashCode Caching and Usage in Collections
             String overrides hashCode() and is widely used as a key in hash-based collections like:

             HashMap, HashSet, Hashtable

             Since the value doesn‚Äôt change, the hashCode stays constant ‚Äî which ensures consistent behavior.


             Map<String, String> map = new HashMap<>();
             map.put("key", "value");
             If key changed later ‚Üí you‚Äôd never find the value again.

             5. Easy to Debug and Predictable
             Since strings don‚Äôt change once created, you can trust the value remains what you expect.

             Makes code simpler to debug and reason about.

             ‚úÖ How is String Made Immutable?
             Internally:

             The String class uses a final char[] value array.

             This array is marked private and not exposed.

             There are no setters or methods that modify the array in place.
13. Explain the collections framework hierarchy.
14. Difference between Hashtable and HashSet.

    Hastable stores key -value pairs and it is synchronized ans it doesn't allow null key and value.
    HashSet store only unique element , not synchronized by defaullt and allow one null values.
    HashSet internally call HashMap and while Hashtable uses a hash table data structure.


15. Difference between Comparable and Comparator.
     comparable is use to for natural ordering of the object, need to implement comparable interface and override the compataeTo method.
     only one way to compare objects.

     Comparator is used to custome ordering of the object implment copaartor iNTERFACE TO OVERID ETHE METHODA compare().

Q.16 - How is a String saved in JAVA?
Q.17 Difference between == and .equals() ?
 == checks if two references point to the same memory location.
 .equals() checks if two objects are logically equal based on their data. For strings
 and most custom objects, always prefer .equals() unless you're intentionally checking for object identity."
  String a = "hello";
  String b = "hello";
  String c = new String("hello");

  System.out.println(a == b);       // true (same reference from String pool)
  System.out.println(a == c);       // false (c is new object in heap)
  System.out.println(a.equals(c));  // true (same content)


 Q17- difference between string pool and heap memory?


  The String Pool is a special area in the heap memory where Java stores interned string literals to save memory. If the same literal is used again, Java reuses the existing object.

  In contrast, when you use new String("..."), it always creates a new object in the heap, even if the content is the same.

  The pool helps improve memory efficiency and performance by avoiding duplicate immutable strings."

17. Write a program to create a custom exception.
20. Difference between final, finally, and finalize.
19. Why is an abstract class allowed to have a constructor?
24. What are Java Streams and Lambda Expressions?
27. What is a functional interface?
6) What are commonly used interfaces in Selenium
 8 How is memeory allocated in String literal and New String class object
 9 How string is immutable?
 10. Difference between a process and a thread
 Discussed horizontal and vertical scaling
 Difference between abstract and interface class in OOP


 ‚úÖ Why Use a private Constructor?
 Ans : A private constructor prevents the creation of objects from outside the class.


.  Selenium Question :
   RestAssured


   JerseyClient
   Code Review Prinicpal -Kiss.SOLID
   HttpMethod-
   File Excel
   Maven


