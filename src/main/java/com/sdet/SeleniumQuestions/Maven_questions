1. plugin vs dependency
ans- Dependecy is external libraries or jar which your project needs to compile, run, or test your code.
     Declared inside the <dependencies> section in your pom.xml.
     They are downloaded from remote repositories (like Maven Central) and added to your project’s classpath.

     exa- selenium, restassure

    Plugin - Plugin is a tool that perform specific task during build life cyle(compileing mrunning test , pakcaging)
    Build Plugins:
       1. maven CompilePlugin - Compiles your Java source code.
       2. maven surefire plufgin - Run Unit Test
       3. maven Jar Plugin - Packages compiled code into a JAR file.
       4. maven clean plugin - Cleans the target directory
       5. Maven Install Plugin
       6. Maven deploy plugin

            Maven Default Lifecycle: Key Phases (in order)
            Here’s a breakdown of the most commonly used phases in the default lifecycle:

            Phase	Purpose
            validate	Validates the project structure and configuration.
            compile	Compiles the source code of the project.
            test	Runs unit tests using a suitable framework (e.g., JUnit, TestNG).
            package	Packages the compiled code into a JAR, WAR, etc.
            verify	Runs checks to verify the package is valid and meets quality criteria.
            install	Installs the package into the local repository (~/.m2/repository).
            deploy	Copies the final package to a remote repository (for sharing).

       Profile :A Maven profile is a way to customize or modify the build configuration based
        on the environment or use case—like different database connections, test environments, or OS-specific builds.
