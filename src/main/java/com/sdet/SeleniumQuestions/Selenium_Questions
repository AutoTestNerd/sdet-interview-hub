Q1. What is different types of Wait in selenium?

Implicit wait - Waits for specific times for all elements before throwing exception(NoSuchElement Exception.)
  Ex-
          driver.manage().Timeout.wait(Duration.ofSeconds(10));
explicit wait - wait for the specific condition to be true;

        WebDriverWait wait = new wait(Duration.ofSecons(15));
        wait.until(ExpectedCondition.elementToBeClicked(By.id("login"));
Fluent Wait - Custom wait with polling frequency and exceptional Handling.

  wait<Webdriver> fluentWait =  new fluent<>(driver)
                                .withTimeOut(Duration.ofsecond(15)).
                                .pollingEvery(Duration.ofSeconds(2))
                                .ignoring(NoSUchELementException.class);

                                fluentwait.until(driver - > driver.findelement(By.id("login"));


     without concise code
     Wait<WebDriver> wait = new FluentWait<WebDriver>(driver)
                 .withTimeout(Duration.ofSeconds(30))     // Maximum wait time
                 .pollingEvery(Duration.ofSeconds(2))     // Check every 2 seconds
                 .ignoring(NoSuchElementException.class); // Ignore if not found initially

             // Define the wait condition using an anonymous inner class (not lambda)
             Function<WebDriver, WebElement> waitFunction = new Function<WebDriver, WebElement>() {
                 @Override
                 public WebElement apply(WebDriver driver) {
                     return driver.findElement(By.id("login"));
                 }
             };

             // Perform the wait using the full function
             WebElement loginElement = wait.until(waitFunction);





  Q2. What is the difference between driver.close() and driver.quit()?


  Q3. ChromeDriver driver = new ChromeDriver();
      WebDriver driver = new WebDriver();
      WebDriver driver = new ChromeDriver();
      which one is valid ?

      Ans :1. ChromeDriver driver = new ChromeDriver(); ✅ Valid
           This creates a Chrome-specific driver.

           You can use all ChromeDriver-specific methods (though there aren’t many exclusive ones).

           Good if you’re sure you’re only using Chrome.

           2. WebDriver driver = new WebDriver(); ❌ Invalid
           WebDriver is an interface, and you cannot instantiate interfaces directly.

           This will throw a compilation error.

           3. WebDriver driver = new ChromeDriver(); ✅ Valid and Recommended
           This uses polymorphism: WebDriver is the interface, and ChromeDriver is the implementation.

           It makes your code more flexible — you can easily switch to FirefoxDriver, EdgeDriver, etc. later.

  Q4. how it works internally?
       WebDriver is an interface provided by Selenium.

       ChromeDriver is a class that implements WebDriver.
       So you're assigning an object of ChromeDriver to a reference of type WebDriver — this is polymorphism.

        new ChromeDriver()-
          This creates a new instance of Chrome browser controlled by Selenium.

          Internally, the constructor of ChromeDriver does several things:

          Starts the ChromeDriver server executable (usually chromedriver.exe)

          Establishes a session with the Chrome browser

          Sends a newSession command to Chrome via W3C WebDriver protocol

          Launches the actual Chrome browser window in automation mode