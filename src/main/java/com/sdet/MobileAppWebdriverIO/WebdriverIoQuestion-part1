

Q1. How would you scroll to an element in a mobile app using WebDriverIO?
describe('Mobile App Scroll Test', () => {
    it('should scroll to the target element', async () => {
        // Locate the element to scroll to
        const targetElement = await $('~targetElement');  // Replace with actual selector

        // Scroll to the element
        await targetElement.scrollIntoView();

        // Optional: Validate if the element is now visible
        await expect(targetElement).toBeDisplayed();
    });
});

Q2:How do you handle a mobile app alert (e.g., an OK button) using WebDriverIO?

describe('Mobile App Alert Test', () => {
    it('should accept an alert', async () => {
        // Trigger the alert (e.g., by clicking a button)
        const triggerButton = await $('~triggerAlertButton');  // Replace with actual selector
        await triggerButton.click();

        // Wait for the alert to be displayed
        const alertText = await driver.getAlertText();

        // Accept the alert (click the OK button)
        await driver.acceptAlert();

        // Optional: Add assertions to ensure the action was successful
        console.log(alertText);  // Log the alert text to the console (for debugging purposes)
    });
});

3. How would you swipe on a mobile screen in WebDriverIO?

it('How would you swipe on a mobile screen in WebDriverIO?' , async () =>{

        const screenWidth = (await driver.getWindowRect()).width;
        const screenHeight = (await driver.getWindowRect()).height;
        const startX = screenWidth/2;
        const startY = screenHeight*0.8;
        const  endY = screenHeight*0.2;

        await driver.performActions([

            {
                type: 'pointer',
                id: 'finger1',
                parameters: {pointerType:'touch'},
                actions: [
                    { type:'pointerMove',duration:'0',X:startX,Y:startY},
                    {type:'PointerDown'},
                    {type:'pause',duration:200},
                    {type:'pointerMove',duration:'0',X:startX,y:endY},
                    {type:'pointerUp'}
                ]
            }
        ]);


              const newContent = await $('~newContent'); // Replace with actual selector
        await expect(newContent).toBeDisplayed();

    });

  4.
  How would you handle the mobile device’s native keyboard in WebDriverIO?




  8. How to launch a deep link inside a mobile app?
it('should open a deep link', async () => {
    await driver.execute('mobile: deepLink', {
        url: 'app://settings/profile',
        package: 'com.example.app'
    });
});

6. How to swipe horizontally between carousel items?
it('should swipe left in carousel', async () => {
    const { width, height } = await driver.getWindowRect();
    await driver.performActions([
        {
            type: 'pointer',
            id: 'finger1',
            parameters: { pointerType: 'touch' },
            actions: [
                { type: 'pointerMove', duration: 0, x: width * 0.8, y: height/2 },
                { type: 'pointerDown' },
                { type: 'pause', duration: 100 },
                { type: 'pointerMove', duration: 1000, x: width * 0.2, y: height/2 },
                { type: 'pointerUp' }
            ]
        }
    ]);
});
7.How to take a screenshot after test failure? (Hooks)
afterEach(async function() {
    if (this.currentTest.state === 'failed') {
        await driver.saveScreenshot(`./errorShots/${this.currentTest.title}.png`);
    }
});
8. Push Notifications come from the backend server and appear outside the app in the device's notification tray. We can test these mainly on Android using Appium’s openNotifications() method and validate the notification text.

   In-App Notifications like toasts, banners, or snackbars are part of the app’s UI and can be tested directly by locating the UI elements using WebDriverIO selectors.


9. Background app	driver.background(seconds)
   Kill app	driver.terminateApp(packageId)
   Relaunch app	driver.activateApp(packageId)
10. "Synchronous code runs step by step, blocking the next step until the current one finishes.
     Asynchronous code allows certain tasks to run in the background and not block the main thread.


 What is a Promise?
Definition:
A Promise is a JavaScript object that represents the eventual completion (or failure) of an asynchronous operation and its resulting value.

States of a Promise:

Pending: Initial state; neither fulfilled nor rejected.

Fulfilled: Operation completed successfully.

Rejected: Operation failed.

Why Promises?
Before promises, asynchronous code used callbacks, which led to “callback hell” — hard to read and maintain. Promises provide a cleaner, more manageable way to handle async code.



The async keyword is used to declare a function that always returns a Promise. Even if you return a non-promise value, it is implicitly wrapped in a resolved Promise.



What is await?
Definition:
The await keyword can only be used inside async functions. It pauses execution of the function until the awaited Promise is resolved or rejected.

Common Crash Types in Firebase Crashlytics
1. Null Pointer Exception
Android: java.lang.NullPointerException

Cause: Trying to use an object reference that is null.

2. Index Out of Bounds Exception
Android: java.lang.IndexOutOfBoundsException

Cause: Accessing an invalid index in arrays or lists.

3. Illegal Argument Exception
Android: java.lang.IllegalArgumentException

Cause: Passing invalid arguments to a method.

4. Out of Memory Error
Android/iOS: Memory exhaustion causing app to crash.

5. Fatal Exception
A catch-all term for crashes that cause app termination.

6. ANR (Application Not Responding)
Android app freezes or UI thread is blocked for too long.

7. SIGABRT (Signal Abort)
iOS/Native: App aborts due to assertion failure or critical error.

8. SIGSEGV (Segmentation Fault)
iOS/Native: Accessing invalid memory (common in C/C++ or Swift/Obj-C code).

9. EXC_BAD_ACCESS
iOS: Accessing memory that has been deallocated or is invalid.

10. Illegal State Exception
Android: App is in an unexpected state.

11. Network-related Exceptions
Timeouts, unknown host, SSL exceptions causing app failure.

12. Stack Overflow Error
Infinite recursion or excessive method calls.

13. Class Not Found Exception
Missing classes or dependencies at runtime.

14. Number Format Exception
Errors when parsing invalid number strings.

15. Security Exceptions
Unauthorized access or permission issues.



adb logcat | grep Crashlytics
For iOS, use idevicesyslog

Biometric
await driver.execute('mobile: sendBiometricMatch', { match: true });
    } else {
      // For Android, simulate fingerprint success
      await driver.fingerPrint(1);


